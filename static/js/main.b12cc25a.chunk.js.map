{"version":3,"sources":["util/Spotify.js","util/config.js","components/SearchBar/SearchBar.jsx","components/Track/Track.jsx","components/Tracklist/Tracklist.jsx","components/SearchResults/SearchResult.jsx","components/Playlist/Playlist.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["Spotify","accessToken","getAccessToken","this","hash","window","location","accessTokenMatch","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","authenticationUrl","getUserId","fetch","method","headers","Headers","catch","networkError","console","error","response","ok","json","json_response","id","Error","search","term","searchTracksUrl","tracks","track_list","items","map","track","name","artist","artists","album","uri","createNewPlaylist","postPlaylist","playlistId","length","postPlaylistTracks","user_id","url","body","JSON","stringify","public","jsonResponse","trackUris","uris","SearchBar","props","state","value","handleChange","bind","handleKeyDown","handleClick","searchBarInput","focus","event","setState","target","key","e","searchResult","updateSearchResult","className","placeholder","ref","input","onChange","onKeyDown","onClick","React","Component","Track","trackAction","isRemoval","TrackList","trackList","SearchResult","addTrack","Playlist","handleNameChange","handleSave","updateName","savePlaylistToSpotify","playlistName","playlistTracks","resetPlaylist","removeTrack","App","updatePlaylistName","addTrackToPlaylist","removeTrackFromPlaylist","newSearchResult","newName","includes","push","trackToRemove","index","findIndex","updatedPlaylist","splice","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.b12cc25a.chunk.js","sourcesContent":["import spotifyClientId from './config.js';\n\nconst redirectUri = 'http://localhost:3000/';\n\nconst authorizeUrl = 'https://accounts.spotify.com/authorize';\nconst searchUrl = 'https://api.spotify.com/v1/search';\nconst getUserIdUrl = 'https://api.spotify.com/v1/me';\nconst scope = 'playlist-modify-private';\n\n\nconst Spotify = {\n  accessToken: '',\n\n  getAccessToken() {\n    if (this.accessToken) {\n      return this.accessToken;\n    }\n\n    // Check if the access token is in the URL\n    const hash = window.location.hash;\n    const accessTokenMatch = hash.match(/access_token=([^&]*)/);\n    const expiresInMatch = hash.match(/expires_in=([^&]*)/);\n\n    // If we could extract a valid access token & expiring time,\n    // save the values and return the access token. Otherwise,\n    // redirect to the authentication login page.\n    if (accessTokenMatch && expiresInMatch) {\n      this.accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      // Clear the accessToken once it expires\n      window.setTimeout(() => this.accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return this.accessToken;\n    } else {\n      const authenticationUrl =\n          `${authorizeUrl}?client_id=${spotifyClientId}&redirect_uri=${\n              redirectUri}&scope=${scope}&response_type=token&state=123`;\n      window.location = authenticationUrl;\n    }\n  },\n\n  async getUserId() {\n    this.getAccessToken();\n    try {\n      const response =\n          await fetch(getUserIdUrl, {\n            method: 'GET',\n            headers: new Headers({\n              'Authorization': `Bearer ${this.accessToken}`,\n            })\n          }).catch((networkError) => {console.error(networkError)});\n      if (response.ok) {\n        const json_response = await response.json();\n        if ('id' in json_response) {\n          return json_response.id;\n        }\n        throw new Error('JSON response does not have the key \"id\".');\n      }\n      throw new Error('Request failed.');\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  async search(term) {\n    this.getAccessToken();\n    const searchTracksUrl = `${searchUrl}?q=${term}&type=track&limit=10`;\n    try {\n      const response = await fetch(searchTracksUrl, {\n                         method: 'GET',\n                         headers: new Headers({\n                           'Authorization': `Bearer ${this.accessToken}`,\n                         })\n                       }).catch((networkError) => {\n        console.error(networkError);\n      });\n\n      if (response.ok) {\n        const json_response = await response.json();\n        if ('tracks' in json_response && 'items' in json_response.tracks) {\n          const track_list = json_response.tracks.items.map((track) => {\n            return {\n              id: track.id,\n              name: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              uri: track.uri\n            };\n          });\n          return track_list;\n        }\n        throw new Error('JSON response does not have the key \"tracks.items\".');\n      }\n      throw new Error('Request failed.');\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  async createNewPlaylist(name, tracks) {\n    const playlistId = await this.postPlaylist(name);\n    if (tracks.length > 0) {\n      await this.postPlaylistTracks(playlistId, tracks);\n    }\n  },\n\n  async postPlaylist(name) {\n    this.getAccessToken();\n    const user_id = await this.getUserId();\n    const url = `https://api.spotify.com/v1/users/${user_id}/playlists`;\n    try {\n      const response = await fetch(url, {\n                         method: 'POST',\n                         headers: new Headers({\n                           'Authorization': `Bearer ${this.accessToken}`,\n                           'Content-Type': 'application/json'\n                         }),\n                         body: JSON.stringify({name: name, public: false})\n                       }).catch((networkError) => {\n        console.error(networkError);\n      });\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        if ('id' in jsonResponse) {\n          return jsonResponse.id;\n        }\n        throw new Error('JSON response does not have the key \"id\".');\n      }\n      throw new Error('Request failed.');\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  async postPlaylistTracks(playlistId, trackUris) {\n    this.getAccessToken();\n    const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\n    try {\n      const response =\n          await fetch(url, {\n            method: 'POST',\n            headers: new Headers({\n              'Authorization': `Bearer ${this.accessToken}`,\n              'Content-Type': 'application/json'\n            }),\n            body: JSON.stringify({uris: trackUris})\n          }).catch((networkError) => {console.error(networkError)});\n      if (response.ok) {\n        return response;\n      }\n      throw new Error('Request failed.');\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport default Spotify;","const spotifyClientId = 'b5ea5928b1984e0e9b1fd6c8048fb164';\n\nexport default spotifyClientId;","import React from 'react';\nimport './SearchBar.css'\nimport Spotify from '../../util/Spotify.js';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.searchBarInput.focus();\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleKeyDown(event) {\n        if (event.key === 'Enter') {\n            this.search();\n        }\n    }\n\n    handleClick(e) {\n        this.search();\n    }\n\n    async search() {\n        const searchResult = await Spotify.search(this.state.value);\n        this.props.updateSearchResult(searchResult)\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input\n                    placeholder=\"Enter A Song, Album, or Artist\"\n                    value={this.state.value}\n                    ref={(input) => { this.searchBarInput = input; }}\n                    onChange={this.handleChange}\n                    onKeyDown={this.handleKeyDown}\n                />\n                <button className=\"SearchButton\" onClick={this.handleClick}>SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(e) {\n        this.props.trackAction()\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.name}</h3>\n                    <p>{this.props.artist} | {this.props.album}</p>\n                </div>\n                <button className=\"Track-action\" onClick={this.handleClick}>\n                    {this.props.isRemoval ? '-' : '+'}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './Tracklist.css';\nimport Track from '../Track/Track.jsx';\n\nclass TrackList extends React.Component {\n\n    trackAction(track) {\n        this.props.trackAction(track);\n    }\n\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.trackList.map((track) => {\n                    return <Track\n                        key={track.id}\n                        name={track.name}\n                        artist={track.artist}\n                        album={track.album}\n                        trackAction={() => this.trackAction(track)}\n                        isRemoval={this.props.isRemoval} />;\n                })}\n            </div>\n        )\n    }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResult.css';\nimport Tracklist from '../Tracklist/Tracklist.jsx';\n\nclass SearchResult extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <Tracklist\n                    trackList={this.props.searchResult}\n                    trackAction={this.props.addTrack}\n                    isRemoval={false} />\n            </div>\n        )\n    }\n\n}\n\nexport default SearchResult;","import React from 'react';\nimport './Playlist.css'\nimport Tracklist from '../Tracklist/Tracklist.jsx';\nimport Spotify from '../../util/Spotify.js';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.updateName(event.target.value);\n    }\n\n    handleSave(event) {\n        this.savePlaylistToSpotify(this.props.playlistName, this.props.playlistTracks.map(track => track.uri));\n    }\n\n    async savePlaylistToSpotify(name, tracks) {\n        await Spotify.createNewPlaylist(name, tracks);\n        this.props.resetPlaylist();\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input\n                    value={this.props.playlistName}\n                    onChange={this.handleNameChange} />\n                <Tracklist\n                    trackList={this.props.playlistTracks}\n                    trackAction={this.props.removeTrack}\n                    isRemoval={true} />\n                <button\n                    className=\"Playlist-save\"\n                    onClick={this.handleSave}>\n                    SAVE TO SPOTIFY\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar.jsx';\nimport SearchResult from '../SearchResults/SearchResult.jsx';\nimport Playlist from '../Playlist/Playlist.jsx';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResult: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n\n    this.updateSearchResult = this.updateSearchResult.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.addTrackToPlaylist = this.addTrackToPlaylist.bind(this);\n    this.removeTrackFromPlaylist = this.removeTrackFromPlaylist.bind(this);\n    this.resetPlaylist = this.resetPlaylist.bind(this);\n  }\n\n  updateSearchResult(newSearchResult) {\n    this.setState({\n      searchResult: newSearchResult\n    });\n  }\n\n  updatePlaylistName(newName) {\n    this.setState({\n      playlistName: newName\n    });\n  }\n\n  addTrackToPlaylist(track) {\n    let playlistTracks = this.state.playlistTracks;\n    if (!playlistTracks.includes(track)) {\n      playlistTracks.push(track);\n      this.setState({\n        playlistTracks: playlistTracks\n      });\n    }\n  }\n\n  removeTrackFromPlaylist(trackToRemove) {\n    const index = this.state.playlistTracks.findIndex((track) => {\n      return track.id === trackToRemove.id;\n    });\n    let updatedPlaylist = this.state.playlistTracks;\n    updatedPlaylist.splice(index, 1);\n    this.setState({\n      playlistTracks: updatedPlaylist\n    });\n  }\n\n  resetPlaylist() {\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar updateSearchResult={this.updateSearchResult} />\n          <div className=\"App-playlist\">\n            <SearchResult\n              searchResult={this.state.searchResult}\n              addTrack={this.addTrackToPlaylist} />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              updateName={this.updatePlaylistName}\n              removeTrack={this.removeTrackFromPlaylist}\n              resetPlaylist={this.resetPlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}